from globals import *
from peer import *
from player import *

####
#### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –ò—Ö –∑–Ω–∞—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞.
####

def init():
    # –≠—Ç–∏–º –≥–ª–æ–±–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –∏—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º–∏:
    global API_ID
    global API_HASH
    global BOT_TOKEN
    global client
    global conn
    global cursor

    # –û—Ç–∫—Ä—ã—Ç–∏–µ config.ini –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞.
    # Config.ini —Å–æ–∑–¥–∞—ë—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –≥–¥–µ –ª–µ–∂–∏—Ç script.py.
    config = configparser.ConfigParser()
    config.read(os.path.join(os.path.dirname(__file__), 'config.ini'))

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ config.ini –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –ø–æ–ª—è–º–∏ –≤ —Å–ª—É—á–∞–µ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è:
    if config.has_section('API') == False:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ .ini —Ñ–∞–π–ª–∞...")
        config.add_section('API')
        id_input = input("–í–≤–µ–¥–∏—Ç–µ API id: ")
        hash_input = input("–í–≤–µ–¥–∏—Ç–µ API hash: ")
        bot_token_input = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: ")
        config.set('API', 'id', id_input)
        config.set('API', 'hash', hash_input)
        config.set('API', 'token', bot_token_input)
        print("–ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ config.ini...")
        config.write(open(os.path.join(os.path.dirname(__file__), 'config.ini'), 'w'))

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ config.ini. –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ bot.session, —Ö—Ä–∞–Ω—è—â–µ–≥–æ —Å–µ—Å—Å–∏—é –≤ Telegram, –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ.
    API_ID = config.getint('API', 'id')
    API_HASH = config.get('API', 'hash')
    BOT_TOKEN = config.get('API', 'token')
    client = TelegramClient(os.path.join(os.path.dirname(__file__), 'bot'), API_ID, API_HASH).start(bot_token=BOT_TOKEN)

    # –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –µ—ë —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω—É–∂–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏.
    conn = sqlite3.connect(os.path.join(os.path.dirname(__file__), 'gamelogs.sqlite'), check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute("CREATE TABLE IF NOT EXISTS GameScores('name' INTEGER, 'user_id' INTEGER, 'score' INTEGER, 'out_of' INTEGER, 'kicked' INTEGER DEFAULT 0, 'tour' INTEGER DEFAULT 1)")
    cursor.execute("CREATE TABLE IF NOT EXISTS ChatsPreferences( 'chat_id' INTEGER, 'chat_name' TEXT, 'delete_immediately' INTEGER, 'clear_after_duel' INTEGER)")

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–∏—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –≤—Å–µ –ø–∏—Ä—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    cursor.execute("SELECT * FROM ChatsPreferences")
    chats_from_table = cursor.fetchall()
    for chat_from_table in chats_from_table:
        new_peer = Peer(*chat_from_table)
        peers.append(new_peer)

####
#### –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±–Ω–æ–≤–ª—è—é—â–∏–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
####

# –ò—â–µ—Ç –ø–∏—Ä –ø–æ –µ–≥–æ id –≤ –ª–∏—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
async def get_peer_index_by_id(_id):
    for i in range(len(peers)):
        if peers[i].id == _id:
            return i

    # –ï—Å–ª–∏ –ø–∏—Ä –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è, —Ç–æ —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–æ–≤—ã–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ª–∏—Å—Ç.
    chat = await client.get_entity(await client.get_entity(_id))
    cursor.execute("INSERT INTO ChatsPreferences VALUES(:id, :name, 0, 0)", {'id':chat.id, 'name':chat.title})
    conn.commit()
    peers.append(Peer(chat.id, chat.title, 0, 0))
    return len(peers)-1

# –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–∂–∫–∞–º–∏ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –¥—É—ç–ª–∏, –µ—Å–ª–∏ —ç—Ç–∞ –æ–ø—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞.
async def delete_messages(peer_index):
    try:
        await client.delete_messages(peers[peer_index].input_peer, peers[peer_index].messages_with_spoon_ids)
        peers[peer_index].messages_with_spoon_ids = []
    except Exception as e:
        print(e)

# –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏–≥—Ä–∞–ª –¥—É—ç–ª—å, –ø—Ä–æ–≤–æ–¥—è—â—É—é—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞.
def user_kicked_tournament(_player):
    cursor.execute("UPDATE GameScores SET kicked=1, tour=0 WHERE user_id=:user_id",
                   {'user_id': _player.id})
    conn.commit()

# –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∏–≥—Ä–æ–∫–∞, –ø–æ–±–µ–¥–∏–≤—à–µ–≥–æ –≤ –¥—É—ç–ª–∏, –ø—Ä–æ–≤–æ–¥—è—â–µ–π—Å—è –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞, –Ω–æ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥/—Ç—É—Ä/—É—Ä–æ–≤–µ–Ω—å/–ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.
def user_won_tournament(_player):
    cursor.execute("UPDATE GameScores SET tour=:tour WHERE user_id=:user_id",
                   {'tour': _player.tour+1, 'user_id': _player.id})
    conn.commit()

# –ü—Ä–∏–±–∞–≤–ª—è–µ—Ç –æ—á–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –¥—É—ç–ª–∏.
def user_won(_player):
    cursor.execute("UPDATE GameScores SET score=:score WHERE user_id=:user_id",
                   {'score': _player.score+1, 'user_id': _player.id, })
    conn.commit()

# –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ –æ—Ç—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä —É —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –≤ –¥—É—ç–ª–∏.
def pair_played(_player1, _player2):
    cursor.execute("UPDATE GameScores SET out_of=out_of+1 WHERE user_id=:user_id",
                   {'user_id': _player1.id, })
    cursor.execute("UPDATE GameScores SET out_of=out_of+1 WHERE user_id=:user_id",
                   {'user_id': _player2.id, })
    conn.commit()

# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª–∏—Å—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –≤ –ª–∏—Å—Ç –∏—Ö id.
def users_to_id(participants):
    for i in range(len(participants)):
        yield participants[i].user_id

# –ò—â–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–≥—Ä–æ–∫–∞ –ø–æ –µ–≥–æ id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∑–∞–Ω–æ—Å–∏—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
async def get_player_by_id(_id):
    cursor.execute("SELECT name, user_id, score, kicked, tour FROM GameScores WHERE user_id=:user_id", {'user_id': _id})
    result = cursor.fetchall()

    # –ï—Å–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∏—Å–∫–æ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –æ–Ω –≤–Ω–æ—Å–∏—Ç—Å—è —Ç—É–¥–∞.
    if len(result) == 0:
        user = await client.get_entity(await client.get_input_entity(_id))
        name = user.first_name
        score = 0
        cursor.execute("INSERT INTO GameScores VALUES(:name, :user_id, :score, 0, 0, 1)",
                       {'name': name, 'user_id': _id, 'score': score, })
        conn.commit()
        return Player(_id, name, score, 0, 1)
    else:
        return Player(result[0][0], result[0][1], result[0][2], result[0][3], result[0][4])

####
#### –ë–ª–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ event listener'–æ–≤.
####

# –ó–¥–µ—Å—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (message) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–π —á–∞—Ç (peers[peer_index]) –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.
async def handle_message(message, peer_index):
    # –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–æ–¥–∂–∏-–ª–æ–∂–∫—É.
    if "ü•Ñ" in message.message:
        # –ï—Å–ª–∏ –≤ —á–∞—Ç–µ –≤–µ–¥—ë—Ç—Å—è –¥—É—ç–ª—å –∏ –ª–æ–∂–∫–∞ –ø—Ä–∏—Å–ª–∞–Ω–∞ –∫–µ–º-—Ç–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥—É—ç–ª–∏, —Ç–æ:
        if peers[peer_index].pvp_mode_on == True and (message.from_id == peers[peer_index].first_player.id or message.from_id == peers[peer_index].second_player.id):
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å—á—ë—Ç—á–∏–∫ –ª–æ–∂–µ–∫, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö" –≤ —Ö–æ–¥–µ –¥—É—ç–ª–∏, –∞ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–∂–∫–æ–π –≤–Ω–æ—Å–∏—Ç—Å—è –≤ –ª–∏—Å—Ç messages_with_spoon_ids, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π, –µ—Å–ª–∏ –≤ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ "–£–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥—É—ç–ª–∏".
            peers[peer_index].counter += 1
            peers[peer_index].messages_with_spoon_ids.append(message.id)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100, –∏ –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤—ã–∏–≥—Ä—ã—à–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö, —Å—á–∏—Ç–∞–µ—Ç—Å—è, —á—Ç–æ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ª–æ–∂–∫–æ–π –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –¥—É—ç–ª—å.
            ran = random.randint(0,100)
            if ran < win_probability_percents:
                winner=None
                loser=None
                spoon=""

                # –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "–ª–æ–∂–∫–∞" —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º.
                if peers[peer_index].counter % 10 == 1:
                    spoon=" –ª–æ–∂–∫–∞ "
                elif 5 > peers[peer_index].counter % 10 > 1:
                    spoon=" –ª–æ–∂–∫–∏ "
                else:
                    spoon=" –ª–æ–∂–µ–∫ "

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ.
                if message.from_id == peers[peer_index].first_player:
                    winner = peers[peer_index].first_player
                    loser = peers[peer_index].second_player
                else:
                    winner = peers[peer_index].second_player
                    loser = peers[peer_index].first_player

                # –ü—Ä–∏–±–∞–≤–ª–µ–Ω–∏–µ 1 –æ—á–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥—É—ç–ª–µ–π —É –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤.
                user_won(winner)
                pair_played(winner, loser)

                # –ï—Å–ª–∏ —Å—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∏–ª–æ—Å—å –≤ —Ä–∞–º–∫–∞—Ö —Ç—É—Ä–Ω–∏—Ä–∞, —Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –Ω–∞–¥–æ –∏—Å–∫–ª—é—á–∏—Ç—å –∏–∑ –Ω–µ–≥–æ. –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –¥—É—ç–ª–∏ —Ç–∞–∫–∂–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç—Ç–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞.
                if peers[peer_index].tournament==True:
                    user_won_tournament(winner)
                    user_kicked_tournament(loser)
                    msg = end_phrases[random.randint(0, len(end_phrases))] + "\n" + winner.name + " : " + str(winner.score) + " +1 (–≤—ã–∏–≥—Ä–∞–ª —Ä–∞—É–Ω–¥)\n" + loser.name + " : " + str(
                        loser.score) + " (–≤—ã–±—ã–ª –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞)\n\n" + str(peers[peer_index].counter) + spoon + "–±—ã–ª–æ —É—Ç—Ä–∞—á–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–∏—Ç–≤—ã."
                else:
                    msg = end_phrases[random.randint(0, len(end_phrases))] + \
                          "\n" + winner.name + " : " + str(winner.score) + " +1\n" + loser.name + " : " + str(loser.score) + "" \
                          "\n\n" + str(peers[peer_index].counter) + spoon + "–±—ã–ª–æ —É—Ç—Ä–∞—á–µ–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–∏—Ç–≤—ã."

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—â–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–∂–∫–∞–º–∏ (–µ—Å–ª–∏ –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –¥—É—ç–ª–∏). –û–±–Ω—É–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–∏—Ä–∞, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥—É—ç–ª—å—é.
                await client.send_message(entity=await client.get_input_entity(message.to_id), message=msg,
                                              reply_to=message.id)
                if peers[peer_index].clear_after_duel==True:
                    await  delete_messages(peer_index)
                peers[peer_index].reset()

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–∂–∫–æ–π –ø—Ä–∏—Å–ª–∞–Ω–æ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥—É—ç–ª–∏ –∏ –≤ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ–≥–æ —Å–ª–µ–¥—É–µ—Ç —É–¥–∞–ª–∏—Ç—å.
        elif peers[peer_index].delete_immediately==True:
            try:
                await client.delete_messages(await client.get_input_entity(message.to_id), [message.id])
            except Exception as e:
                print(e)


# –ò—â–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–Ω—É—Ç—Ä–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º.
async def find_command(message, peer_index):
    command=message.message
    if "–í—ã–∑—ã–≤–∞—é —Ç–µ–±—è –Ω–∞ –¥—É—ç–ª—å!" in message.message or "/call@spoonduelbot" in message.message:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å—ë-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:
        if message.reply_to_msg_id is not None:
            replied_message = (await client(GetMessagesRequest(await client.get_input_entity(message.to_id), [message.reply_to_msg_id]))).messages[0]
            to_id = replied_message.from_id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –≤—ã–∑—ã–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –¥—É—ç–ª—å —Å–∞–º —Å–µ–±—è.
            if to_id != message.from_id:
                reply_markup = ReplyInlineMarkup([KeyboardButtonRow([KeyboardButtonCallback(text="‚ù§Ô∏èÔ∏è", data=str(to_id)), KeyboardButtonCallback(text="üíî", data=b'0')])]) # create
                await client.send_message(entity=await client.get_input_entity(message.to_id), message = "[–¢—ã](tg://user?id="+str(to_id)+") "+begin_phrase, reply_to = message.id, buttons = reply_markup)
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—É—Å—Ç–æ—Ç—É, –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Ç–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
        else:
            await client.send_message(entity=await client.get_input_entity(message.to_id), message=annoyed_reply, reply_to=message.id)
    elif "/showstats@spoonduelbot" in command:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute("SELECT * FROM GameScores ORDER BY score DESC")
        result = cursor.fetchall()

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 100000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—Ç–æ –µ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ - –≤—Å–µ—Ö) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–∏—Å—Ç –∏–∑ id —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        members = await client(GetParticipantsRequest(channel = await client.get_input_entity(message.to_id), filter = ChannelParticipantsSearch(''), offset = 0, limit = 100000, hash = 0))
        ids = list(users_to_id(members.participants))

        # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (results) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤ —á–∞—Ç–µ (ids). –ü–µ—Ä–µ–±–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö 10 –∏–≥—Ä–æ–∫–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é.
        msg = "**–ë–æ–≥–∏ —Ä–∞–Ω–¥–æ–º–∞:**\n"
        counter=0
        for i in result:
            if i[1] in ids:
                msg += "**" + str(i[2]) + "** —É " + str(i[0]) + "\n"
                counter+=1
                if counter==10:
                    break
        await client.send_message(entity=await client.get_input_entity(message.to_id), message = msg, reply_to = message.id)
    elif "/luckiest@spoonduelbot" in command: # in this ELIF block the bot shows current stats
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute("SELECT * FROM GameScores ORDER BY score DESC")
        result = cursor.fetchall()

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 100000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—Ç–æ –µ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ - –≤—Å–µ—Ö) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–∏—Å—Ç –∏–∑ id —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        members = await client(GetParticipantsRequest(channel = await client.get_input_entity(message.to_id), filter = ChannelParticipantsSearch(''), offset = 0, limit = 100000, hash = 0))
        ids = list(users_to_id(members.participants))

        # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (results) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤ —á–∞—Ç–µ (ids). –ü–µ—Ä–µ–±–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö 10 –∏–≥—Ä–æ–∫–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é.
        msg = "**–ü–µ—Ä–µ–∏–≥—Ä–∞–≤—à–∏–µ —É–¥–∞—á—É** (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø–æ–±–µ–¥/–±–∏—Ç–≤):\n"
        counter=0
        for i in result:
            if i[1] in ids:
                msg += "**" + str(round(float(i[2])/float(i[3]) if i[3]!=0 else 0, 2)) + "** —É " + str(i[0]) + "\n"
                if counter==10:
                    break
        await client.send_message(entity=await client.get_input_entity(message.to_id), message = msg, reply_to = message.id)
    elif "/help@spoonduelbot" in command:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ help-—Å–æ–æ–±—â–µ–Ω–∏—è.
        await client.send_message(entity=await client.get_input_entity(message.to_id), message = help_message, reply_to = message.id)
    elif "/tournament@spoonduelbot" in command:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        cursor.execute("SELECT * FROM GameScores WHERE kicked=0 ORDER BY tour DESC")
        result = cursor.fetchall()

        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 100000 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (—Ç–æ –µ—Å—Ç—å —Å—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ - –≤—Å–µ—Ö) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ª–∏—Å—Ç –∏–∑ id —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
        members = await client(GetParticipantsRequest(channel = await client.get_input_entity(message.to_id), filter = ChannelParticipantsSearch(''), offset = 0, limit = 100000, hash = 0))
        ids = list(users_to_id(members.participants))

        # –ü–µ—Ä–µ–±–æ—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (results) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤ —á–∞—Ç–µ (ids). –ü–µ—Ä–µ–±–æ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–µ—Ä–≤—ã—Ö 10 –∏–≥—Ä–æ–∫–æ–≤, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —É—Å–ª–æ–≤–∏—é.
        msg = "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞:**\n"
        counter=0
        for i in result:
            if i[1] in ids:
                msg += "**" + str(i[5]) + "** —Ä–∞—É–Ω–¥: " + str(i[0]) + "\n"
                counter+=1
                if counter==10:
                    break
        await client.send_message(entity=await client.get_input_entity(message.to_id), message = text, reply_to = message.id)
    elif "/preferences@spoonduelbot" in command:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
        reply_markup = ReplyInlineMarkup([
            KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É" if peers[peer_index].delete_immediately == False else "–ù–µ —É–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É"), data=b"di_switch")]),
            KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏" if peers[peer_index].clear_after_duel == False else "–ù–µ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏"), data=b"ca_switch")]),
            KeyboardButtonRow([KeyboardButtonCallback(text="‚ùå–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùå", data=b"del_message")])])
        await client.send_message(entity=await client.get_input_entity(message.to_id), message = preferences_message, buttons = reply_markup, reply_to = message.id)


####
#### –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—É—é —Ä–µ–∞–∫—Ü–∏—é –±–æ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ç–µ—Ö –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –∏–º–µ—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏.
####


async def handle_query(event, peer_index):
    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å query –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å id –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –Ω–∞ –¥—É—ç–ª—å (caller_id), id –≤—ã–∑–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –¥—É—ç–ª—å (called_id) –∏ id –≤—ã–∑–≤–∞–≤—à–µ–≥–æ query (query_sender_id) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ü–µ—Ä–≤—ã–µ –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —Å –≤—ã–∑–æ–≤–æ–º –Ω–∞ –¥—É—ç–ª—å.
    chat = await client.get_input_entity(event.query.peer)

    bot_message = (await client(GetMessagesRequest(chat, [event.query.msg_id]))).messages[0]

    try:
        caller_message = (await client(GetMessagesRequest(chat, [bot_message.reply_to_msg_id]))).messages[0]
        caller_id = caller_message.from_id

        called_message = (await client(GetMessagesRequest(chat, [caller_message.reply_to_msg_id]))).messages[0]
        called_id = called_message.from_id
    except Exception as e:
        print(e)
        print("Error: there is no one called on the Duel!")

    query_sender_id = event.query.user_id

    # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–∂–∫–æ–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥—É—ç–ª–∏.
    if event.query.data==b'di_switch':
        query_sender = await client(GetParticipantRequest(chat, await client.get_input_entity(query_sender_id)))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤—è–ª–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞.
        if isinstance(query_sender.participant, ChannelParticipantAdmin) or isinstance(query_sender.participant, ChannelParticipantCreator):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—Å—Ç–µ –ø–∏—Ä–æ–≤.
            peers[peer_index].delete_immediately = not peers[peer_index].delete_immediately

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
            reply_markup = ReplyInlineMarkup([
                 KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É" if peers[peer_index].delete_immediately == False else "–ù–µ —É–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É"), data=b"di_switch")]),
                 KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏" if peers[peer_index].clear_after_duel == False else "–ù–µ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏"), data=b"ca_switch")]),
            KeyboardButtonRow([KeyboardButtonCallback(text="‚ùå–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùå", data=b"del_message")])])
            await client.edit_message(entity= chat, message = event.query.msg_id, text = preferences_message, buttons = reply_markup)

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            cursor.execute("UPDATE ChatsPreferences SET delete_immediately=:delete_immediately WHERE chat_id=:chat_id", {'delete_immediately':peers[peer_index].delete_immediately,'chat_id':peers[peer_index].id})
            conn.commit()
            await client(SetBotCallbackAnswerRequest(query_id=event.query.query_id, cache_time=1, message="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã."))
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É - —Ä—è–¥–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–Ω –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        else:
            await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 1, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."))

    # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ - –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–æ–∂–∫–æ–π –ø–æ—Å–ª–µ –¥—É—ç–ª–∏.
    elif event.query.data==b'ca_switch':
        query_sender = await client(GetParticipantRequest(chat, await client.get_input_entity(query_sender_id)))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤—è–ª–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞.
        if isinstance(query_sender.participant, ChannelParticipantAdmin) or isinstance(query_sender.participant, ChannelParticipantCreator):
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—Å—Ç–µ –ø–∏—Ä–æ–≤.
            peers[peer_index].clear_after_duel = not peers[peer_index].clear_after_duel

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –ª–∏—Å—Ç–µ –ø–∏—Ä–æ–≤.
            reply_markup = ReplyInlineMarkup([
                 KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É" if peers[peer_index].delete_immediately == False else "–ù–µ —É–¥–∞–ª—è—Ç—å —Å—Ä–∞–∑—É"), data=b"di_switch")]),
                 KeyboardButtonRow([KeyboardButtonCallback(text=("–£–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏" if peers[peer_index].clear_after_duel == False else "–ù–µ —É–¥–∞–ª—è—Ç—å –ø–æ—Å–ª–µ –¥—É—ç–ª–∏"), data=b"ca_switch")]),
                 KeyboardButtonRow([KeyboardButtonCallback(text="‚ùå–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùå", data=b"del_message")])])
            await client.edit_message(entity= chat, message = event.query.msg_id, text = preferences_message, buttons = reply_markup)

            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            cursor.execute("UPDATE ChatsPreferences SET clear_after_duel=:clear_after_duel WHERE chat_id=:chat_id", {'clear_after_duel':peers[peer_index].clear_after_duel,'chat_id':peers[peer_index].id})
            conn.commit()
            await client(SetBotCallbackAnswerRequest(query_id=event.query.query_id, cache_time=1, message="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã."))
            # –ï—Å–ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É - —Ä—è–¥–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–Ω –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        else:
            await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 1, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."))

    # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ - —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    elif event.query.data==b'del_message':
        query_sender = await client(GetParticipantRequest(chat, await client.get_input_entity(query_sender_id)))

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–≤—à–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç—Å—è.
        if isinstance(query_sender.participant, ChannelParticipantAdmin) or isinstance(query_sender.participant, ChannelParticipantCreator):
            await client.delete_messages(chat, event.query.msg_id)
        # –ò–Ω–∞—á–µ –æ–Ω —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        else:
            await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 42, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤."))

    # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–∞ –¥—É—ç–ª—å.
    elif event.query.data==b'0':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∂–∞–≤—â–∏–π –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–º.
        if called_id == query_sender_id or caller_id == query_sender_id:
            await client.edit_message(entity=chat, message = event.query.msg_id, text = markdown.unparse(bot_message.message, bot_message.entities) + "\n\n–í—ã–∑–æ–≤ –±—ã–ª –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω.")
        # –ö–æ–ª—å —Å–∫–æ—Ä–æ –æ–Ω –∏–º –Ω–µ —è–≤–ª—è–µ—Ç—Å—è, –æ–Ω —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.
        else:
            await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 42, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –≤—ã–∑–æ–≤."))

    # –°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ - –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—ã–∑–æ–≤–∞ –Ω–∞ –¥—É—ç–ª—å.
    else:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∏–¥—ë—Ç –ª–∏ —Å–µ–π—á–∞—Å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –¥—Ä—É–≥–∞—è –¥—É—ç–ª—å –∏ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏ –µ—ë –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
        if peers[peer_index].pvp_mode_on == False or time.time()-peers[peer_index].time_when_duel_started>time_limit:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ id, –∑–∞—à–∏—Ç–æ–≥–æ –≤ –∫–Ω–æ–ø–∫—É, –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å id –Ω–∞–∂–∞–≤—à–µ–≥–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            if query_sender_id == int(event.query.data.decode('ascii')):
                # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ peer, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥—É—ç–ª–∏.
                peers[peer_index].input_peer = chat
                peers[peer_index].first_player = await get_player_by_id(caller_id)
                peers[peer_index].second_player = await get_player_by_id(called_id)

                # –¢–µ–∫—Å—Ç (msg), –¥–æ–±–∞–≤–ª—è–µ–º—ã–π –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –ª–∏ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥—É—ç–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω—ã–Ω–µ—à–Ω–µ–π.
                msg = markdown.unparse(bot_message.message, bot_message.entities) + "\n\n–í—ã–∑–æ–≤ –±—ã–ª –ø—Ä–∏–Ω—è—Ç."
                if peers[peer_index].first_player.kicked == 0 and peers[peer_index].second_player.kicked == 0 and peers[peer_index].first_player.tour==peers[peer_index].second_player.tour:# check if both players are capable of participating in the Tournament
                    peers[peer_index].tournament = True
                    msg += "\n\n**–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ, —Ä–∞—É–Ω–¥** " + str(peers[peer_index].first_player.tour) # second part of the message
                if peers[peer_index].time_when_duel_started is not None and time.time()-peers[peer_index].time_when_duel_started>time_limit:
                    msg+="\n\n__–ü—Ä–µ–¥—ã–¥—É—â–∞—è –¥—É—ç–ª—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–≤–∏–¥—É –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏.__"
                await client.edit_message(entity = chat, message = event.query.msg_id, text = msg)

                # –í–∫–ª—é—á–∞–µ—Ç—Å—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–ª–∏—á–∏—è –≤ —á–∞—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–π –¥—É—ç–ª–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –µ—ë –Ω–∞—á–∞–ª–∞. –ï—Å–ª–∏ –¥—É—ç–ª—å –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è –¥–æ–ª—å—à–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –µ—ë –∏ –Ω–∞—á–∞—Ç—å –¥—Ä—É–≥—É—é.
                peers[peer_index].pvp_mode_on = True
                peers[peer_index].time_when_duel_started=time.time()
            # –ï—Å–ª–∏ id, –≤—à–∏—Ç–æ–µ –≤ –∫–Ω–æ–ø–∫—É, –∏ id –Ω–∞–∂–∞–≤—à–µ–≥–æ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –Ω–∞–∂–∞–≤—à–∏–π —É–≤–µ–¥–æ–º–ª—è–µ—Ç—Å—è –æ —Ç–æ–º, —á—Ç–æ –≤—ã–∑–æ–≤ –±—Ä–æ—Å–∏–ª–∏ –Ω–µ –µ–º—É.
            else:
                await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 42, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤—ã–∑–æ–≤ –±—ã–ª –±—Ä–æ—à–µ–Ω –Ω–µ –≤–∞–º."))
        # –ü–æ–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –≤–µ–¥—ë—Ç—Å—è –¥—É—ç–ª—å, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ–≤—É—é –¥—É—ç–ª—å –Ω–∞—á–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
        else:
            await client(SetBotCallbackAnswerRequest(query_id = event.query.query_id, cache_time = 42, message = "–ü—Ä–æ—Å—Ç–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥—É—ç–ª—å —É–∂–µ –≤–µ–¥—ë—Ç—Å—è."))


####
#### –°–µ–π—á–∞—Å –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ event listener'–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å–∞–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.
####

init()


# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
@client.on(events.NewMessage())
async def handlerNewMessage(event):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –ø–∏—Ä–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    id = list(event.message.to_id.__dict__.values())[0]
    index = await get_peer_index_by_id(id)

    # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        await find_command(event.message, index)
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print(e)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∂–∫—É-—ç–º–æ–¥–∑–∏)
    try:
        await handle_message(event.message, index)
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print(e)

# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –∫–∞–∂–¥–æ–º –Ω–∞–∂–∞—Ç–∏–∏ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏.
@client.on(events.CallbackQuery())
async def handlerCallbackQuery(event):
    index = await get_peer_index_by_id(list(event.query.peer.__dict__.values())[0])
    try:
        await handle_query(event, index)
    except KeyboardInterrupt:
        raise
    except Exception as e:
        print(e)

# –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-a –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.
@client.on(events.InlineQuery())
async def handlerInlineQuery(event):
    await client(SetInlineBotResultsRequest(query_id=event.query.query_id, cache_time=42, results=[
            InputBotInlineResult(id="1", type="article", title="–ö–∏–Ω—É—Ç—å –ª–æ–∂–∫–æ–π –≤ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!", description = "–û—á–µ–Ω—å –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª–æ–∂–∫—É –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å —ç–º–æ–¥–∂–∏.",
                                         send_message=InputBotInlineMessageText("ü•Ñ"),
                                         thumb=InputWebDocument(url="https://www.crosbys.co.uk/images/products/medium/1441875843-88708300.jpg",
                                                                        size=42,mime_type="image/jpeg",
                                                                        attributes=[DocumentAttributeImageSize(
                                                                            w=42,
                                                                            h=42
                                                                        )]
                                                                        ))
    ]))


client.start()
client.run_until_disconnected()
conn.close()